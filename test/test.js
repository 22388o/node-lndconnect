'use strict'

import test from 'tape-promise/tape'
import path from 'path'
import os from 'os'

import { encodeCert, decodeCert, decodeMacaroon, encodeMacaroon, encode, decode } from '../src'

const HOSTNAME = '1.2.3.4'
const PORT = '10009'
const CERT = `-----BEGIN CERTIFICATE-----
MIICuDCCAl6gAwIBAgIQeubXIhKzlGo/scDmWj9VtzAKBggqhkjOPQQDAjA/MR8w
HQYDVQQKExZsbmQgYXV0b2dlbmVyYXRlZCBjZXJ0MRwwGgYDVQQDExN0aGVkZWF0
aG1hY2hpbmUubGFuMB4XDTE5MDEwMjExMzUxOVoXDTIwMDIyNzExMzUxOVowPzEf
MB0GA1UEChMWbG5kIGF1dG9nZW5lcmF0ZWQgY2VydDEcMBoGA1UEAxMTdGhlZGVh
dGhtYWNoaW5lLmxhbjBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABFosqs1rkSPw
i6gOtuKSd7jMx8XSgadnbjWTbAH14+wFKYP7710JfosoikHW2dwZlUEfbeFNs33T
2ifMTqD3hVujggE6MIIBNjAOBgNVHQ8BAf8EBAMCAqQwDwYDVR0TAQH/BAUwAwEB
/zCCAREGA1UdEQSCAQgwggEEghN0aGVkZWF0aG1hY2hpbmUubGFugglsb2NhbGhv
c3SCBHVuaXiCCnVuaXhwYWNrZXSHBH8AAAGHEAAAAAAAAAAAAAAAAAAAAAGHEP6A
AAAAAAAAAAAAAAAAAAGHEP6AAAAAAAAAEOe3k9fX+f6HBMCoVs2HEP6AAAAAAAAA
vPC7//6rGHCHEP6AAAAAAAAA8JND8/hwxvqHEP6AAAAAAAAA6rX1aP4vsbaHEP6A
AAAAAAAAlbtYbhCVtbeHEP6AAAAAAAAALZmwBSSILp+HEP6AAAAAAAAAKNvxGH98
fU+HEP6AAAAAAAAAvOC7LgFuUZGHEP6AAAAAAAAArt5I//4AESIwCgYIKoZIzj0E
AwIDSAAwRQIhALwsEmlLQfARQOca0gbF8XnTofXHqnjkBhyO0vTgTH5lAiB+GU2T
VpSAsPAoKv6XopMG/oMolgo5T1YByHu202p9Uw==
-----END CERTIFICATE-----`
const ENCODED_CERT =
  'TUlJQ3VEQ0NBbDZnQXdJQkFnSVFldWJYSWhLemxHby9zY0RtV2o5VnR6QUtCZ2dxaGtqT1BRUURBakEvTVI4d0hRWURWUVFLRXhac2JtUWdZWFYwYjJkbGJtVnlZWFJsWkNCalpYSjBNUnd3R2dZRFZRUURFeE4wYUdWa1pXRjBhRzFoWTJocGJtVXViR0Z1TUI0WERURTVNREV3TWpFeE16VXhPVm9YRFRJd01ESXlOekV4TXpVeE9Wb3dQekVmTUIwR0ExVUVDaE1XYkc1a0lHRjFkRzluWlc1bGNtRjBaV1FnWTJWeWRERWNNQm9HQTFVRUF4TVRkR2hsWkdWaGRHaHRZV05vYVc1bExteGhiakJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCRm9zcXMxcmtTUHdpNmdPdHVLU2Q3ak14OFhTZ2FkbmJqV1RiQUgxNCt3RktZUDc3MTBKZm9zb2lrSFcyZHdabFVFZmJlRk5zMzNUMmlmTVRxRDNoVnVqZ2dFNk1JSUJOakFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96Q0NBUkVHQTFVZEVRU0NBUWd3Z2dFRWdoTjBhR1ZrWldGMGFHMWhZMmhwYm1VdWJHRnVnZ2xzYjJOaGJHaHZjM1NDQkhWdWFYaUNDblZ1YVhod1lXTnJaWFNIQkg4QUFBR0hFQUFBQUFBQUFBQUFBQUFBQUFBQUFBR0hFUDZBQUFBQUFBQUFBQUFBQUFBQUFBR0hFUDZBQUFBQUFBQUFFT2UzazlmWCtmNkhCTUNvVnMySEVQNkFBQUFBQUFBQXZQQzcvLzZyR0hDSEVQNkFBQUFBQUFBQThKTkQ4L2h3eHZxSEVQNkFBQUFBQUFBQTZyWDFhUDR2c2JhSEVQNkFBQUFBQUFBQWxidFliaENWdGJlSEVQNkFBQUFBQUFBQUxabXdCU1NJTHArSEVQNkFBQUFBQUFBQUtOdnhHSDk4ZlUrSEVQNkFBQUFBQUFBQXZPQzdMZ0Z1VVpHSEVQNkFBQUFBQUFBQXJ0NUkvLzRBRVNJd0NnWUlLb1pJemowRUF3SURTQUF3UlFJaEFMd3NFbWxMUWZBUlFPY2EwZ2JGOFhuVG9mWEhxbmprQmh5TzB2VGdUSDVsQWlCK0dVMlRWcFNBc1BBb0t2NlhvcE1HL29Nb2xnbzVUMVlCeUh1MjAycDlVdz09'

const MACAROON =
  '0201036c6e6402bb01030a10fc3be5e60b0d1405139236c2ab8c35fe1201301a160a0761646472657373120472656164120577726974651a130a04696e666f120472656164120577726974651a170a08696e766f69636573120472656164120577726974651a160a076d657373616765120472656164120577726974651a170a086f6666636861696e120472656164120577726974651a160a076f6e636861696e120472656164120577726974651a140a05706565727312047265616412057772697465000006206c1b4c6c90f1fff66ff7f37c29ccbe68681f9afc65e4305f7f81fb3d1c5a1c7f'
const ENCODED_MACAROON =
  'AgEDbG5kArsBAwoQ_Dvl5gsNFAUTkjbCq4w1_hIBMBoWCgdhZGRyZXNzEgRyZWFkEgV3cml0ZRoTCgRpbmZvEgRyZWFkEgV3cml0ZRoXCghpbnZvaWNlcxIEcmVhZBIFd3JpdGUaFgoHbWVzc2FnZRIEcmVhZBIFd3JpdGUaFwoIb2ZmY2hhaW4SBHJlYWQSBXdyaXRlGhYKB29uY2hhaW4SBHJlYWQSBXdyaXRlGhQKBXBlZXJzEgRyZWFkEgV3cml0ZQAABiBsG0xskPH_9m_383wpzL5oaB-a_GXkMF9_gfs9HFocfw'
const CONNECTION_STRING =
  'lndconnect://1.2.3.4:10009?cert=TUlJQ3VEQ0NBbDZnQXdJQkFnSVFldWJYSWhLemxHby9zY0RtV2o5VnR6QUtCZ2dxaGtqT1BRUURBakEvTVI4d0hRWURWUVFLRXhac2JtUWdZWFYwYjJkbGJtVnlZWFJsWkNCalpYSjBNUnd3R2dZRFZRUURFeE4wYUdWa1pXRjBhRzFoWTJocGJtVXViR0Z1TUI0WERURTVNREV3TWpFeE16VXhPVm9YRFRJd01ESXlOekV4TXpVeE9Wb3dQekVmTUIwR0ExVUVDaE1XYkc1a0lHRjFkRzluWlc1bGNtRjBaV1FnWTJWeWRERWNNQm9HQTFVRUF4TVRkR2hsWkdWaGRHaHRZV05vYVc1bExteGhiakJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCRm9zcXMxcmtTUHdpNmdPdHVLU2Q3ak14OFhTZ2FkbmJqV1RiQUgxNCt3RktZUDc3MTBKZm9zb2lrSFcyZHdabFVFZmJlRk5zMzNUMmlmTVRxRDNoVnVqZ2dFNk1JSUJOakFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96Q0NBUkVHQTFVZEVRU0NBUWd3Z2dFRWdoTjBhR1ZrWldGMGFHMWhZMmhwYm1VdWJHRnVnZ2xzYjJOaGJHaHZjM1NDQkhWdWFYaUNDblZ1YVhod1lXTnJaWFNIQkg4QUFBR0hFQUFBQUFBQUFBQUFBQUFBQUFBQUFBR0hFUDZBQUFBQUFBQUFBQUFBQUFBQUFBR0hFUDZBQUFBQUFBQUFFT2UzazlmWCtmNkhCTUNvVnMySEVQNkFBQUFBQUFBQXZQQzcvLzZyR0hDSEVQNkFBQUFBQUFBQThKTkQ4L2h3eHZxSEVQNkFBQUFBQUFBQTZyWDFhUDR2c2JhSEVQNkFBQUFBQUFBQWxidFliaENWdGJlSEVQNkFBQUFBQUFBQUxabXdCU1NJTHArSEVQNkFBQUFBQUFBQUtOdnhHSDk4ZlUrSEVQNkFBQUFBQUFBQXZPQzdMZ0Z1VVpHSEVQNkFBQUFBQUFBQXJ0NUkvLzRBRVNJd0NnWUlLb1pJemowRUF3SURTQUF3UlFJaEFMd3NFbWxMUWZBUlFPY2EwZ2JGOFhuVG9mWEhxbmprQmh5TzB2VGdUSDVsQWlCK0dVMlRWcFNBc1BBb0t2NlhvcE1HL29Nb2xnbzVUMVlCeUh1MjAycDlVdz09&macaroon=AgEDbG5kArsBAwoQ_Dvl5gsNFAUTkjbCq4w1_hIBMBoWCgdhZGRyZXNzEgRyZWFkEgV3cml0ZRoTCgRpbmZvEgRyZWFkEgV3cml0ZRoXCghpbnZvaWNlcxIEcmVhZBIFd3JpdGUaFgoHbWVzc2FnZRIEcmVhZBIFd3JpdGUaFwoIb2ZmY2hhaW4SBHJlYWQSBXdyaXRlGhYKB29uY2hhaW4SBHJlYWQSBXdyaXRlGhQKBXBlZXJzEgRyZWFkEgV3cml0ZQAABiBsG0xskPH_9m_383wpzL5oaB-a_GXkMF9_gfs9HFocfw'

test('encodeCert', async t => {
  t.plan(1)
  const certPath = path.join(__dirname, 'fixtures', 'tls.cert')
  const cert = await encodeCert(certPath)
  t.equal(cert, ENCODED_CERT, 'encoded cert')
})

test('decodeCert', async t => {
  t.plan(1)
  const decodedCert = decodeCert(ENCODED_CERT)
  t.equal(decodedCert, CERT, 'decoded cert')
})

test('encodeMacaroon', async t => {
  t.plan(1)
  const macaroonPath = path.join(__dirname, 'fixtures', 'admin.macaroon')
  const macaroon = await encodeMacaroon(macaroonPath)
  t.equal(macaroon, ENCODED_MACAROON, 'encoded macaroon')
})

test('decodeMacaroon', async t => {
  t.plan(1)
  const decodedMacaroon = decodeMacaroon(ENCODED_MACAROON)
  t.equal(decodedMacaroon, MACAROON, 'decoded macaroon')
})

test('encode', t => {
  t.plan(1)
  const connectionString = encode({ host: `${HOSTNAME}:${PORT}`, macaroon: ENCODED_MACAROON, cert: ENCODED_CERT })
  t.equal(connectionString, CONNECTION_STRING, 'generated expected connection string')
})

test('decode (valid)', t => {
  t.plan(3)
  const connectionDetails = decode(CONNECTION_STRING)
  t.equal(connectionDetails.host, `${HOSTNAME}:${PORT}`, 'extracted host')
  t.equal(connectionDetails.cert, CERT, 'extracted cert')
  t.equal(connectionDetails.macaroon, MACAROON, 'extracted macaroon')
})

test('decode (invalid protocol)', t => {
  t.plan(1)
  t.throws(() => decode('111' + CONNECTION_STRING), /Invalid protocol/, 'throws an "Invalid protocol" error')
})
